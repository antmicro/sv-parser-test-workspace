diff --git a/verilog/CST/BUILD b/verilog/CST/BUILD
index 08ded62..c554914 100644
--- a/verilog/CST/BUILD
+++ b/verilog/CST/BUILD
@@ -522,7 +522,7 @@ cc_library(
 cc_library(
     name = "verilog_tree_print",
     srcs = ["verilog_tree_print.cc"],
-    hdrs = ["verilog_tree_print.h"],
+    hdrs = ["verilog_tree_print.h","json.hpp"],
     deps = [
         ":verilog_nonterminals",
         "//common/text:concrete_syntax_leaf",
diff --git a/verilog/CST/verilog_tree_print.cc b/verilog/CST/verilog_tree_print.cc
index e6739e3..240f226 100644
--- a/verilog/CST/verilog_tree_print.cc
+++ b/verilog/CST/verilog_tree_print.cc
@@ -19,6 +19,7 @@
 #include <iostream>
 #include <memory>
 #include <string>
+#include <fstream>
 
 #include "absl/strings/str_cat.h"
 #include "absl/strings/string_view.h"
@@ -42,6 +43,7 @@ VerilogPrettyPrinter::VerilogPrettyPrinter(std::ostream* output_stream,
 
 void VerilogPrettyPrinter::Visit(const verible::SyntaxTreeLeaf& leaf) {
   leaf.get().ToStream(auto_indent(), context_) << std::endl;
+  (*cst_current)["token"] = leaf.get().ToString();
 }
 
 void VerilogPrettyPrinter::Visit(const verible::SyntaxTreeNode& node) {
@@ -50,20 +52,45 @@ void VerilogPrettyPrinter::Visit(const verible::SyntaxTreeNode& node) {
 
   auto_indent() << "Node " << tag_info << "{" << std::endl;
 
+
+  nlohmann::json& curr = *cst_current;
+  curr["type"] = NodeEnumToString(static_cast<NodeEnum>(node.Tag().tag));
+  cst_current = nullptr;
+
   {
+    std::vector<nlohmann::json> json_nodes;
+
     const verible::ValueSaver<int> value_saver(&indent_, indent_ + 2);
     for (const auto& child : node.children()) {
       // TODO(fangism): display nullptrs or child indices to show position.
+      nlohmann::json json_subnode;
+      cst_current = &json_subnode;
       if (child) child->Accept(this);
+      cst_current = nullptr;
+      if (!json_subnode.empty())
+        json_nodes.push_back(json_subnode);
     }
+
+    if (json_nodes.size())
+      curr["nodes"] = json_nodes;
   }
+
   auto_indent() << "}" << std::endl;
+
+  cst_current = &curr;
 }
 
 void PrettyPrintVerilogTree(const verible::Symbol& root, absl::string_view base,
                             std::ostream* stream) {
+  static nlohmann::json cst;
   VerilogPrettyPrinter printer(stream, base);
+  printer.cst_current = &cst;
   root.Accept(&printer);
+
+  std::ofstream fileout("dump.json");
+  std::stringstream ss;
+  ss << cst.dump(2);
+  fileout << ss.str();
 }
 
 }  // namespace verilog
diff --git a/verilog/CST/verilog_tree_print.h b/verilog/CST/verilog_tree_print.h
index 5fd0c5f..21bb4d6 100644
--- a/verilog/CST/verilog_tree_print.h
+++ b/verilog/CST/verilog_tree_print.h
@@ -23,6 +23,7 @@
 #include "common/text/concrete_syntax_tree.h"
 #include "common/text/symbol.h"
 #include "common/text/tree_utils.h"
+#include "verilog/CST/json.hpp"
 
 namespace verilog {
 
@@ -35,6 +36,9 @@ class VerilogPrettyPrinter : public verible::PrettyPrinter {
   void Visit(const verible::SyntaxTreeNode&) override;
 
   // void Visit(verible::SyntaxTreeNode*) override;
+
+ public:
+  nlohmann::json cst, *cst_current;
 };
 
 // Prints tree contained at root to stream
